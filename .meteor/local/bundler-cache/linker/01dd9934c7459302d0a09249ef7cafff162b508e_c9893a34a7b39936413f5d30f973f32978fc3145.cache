[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nAccounts = Package['accounts-base'].Accounts;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nLocalStore = Package['frozeman:storage'].LocalStore;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"lib\":{\"stale_session.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/lib/stale_session.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//\n// Server side activity detection for the session timeout\n//\n// Meteor settings:\n// - staleSessionInactivityTimeout: the amount of time (in ms) after which, if no activity is noticed, a session will be considered stale\n// - staleSessionPurgeInterval: interval (in ms) at which stale sessions are purged i.e. found and forcibly logged out\n// - staleSessionForceLogout: whether or not we want to force log out and purge stale sessions\n//\nvar staleSessionPurgeInterval = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionPurgeInterval || 1 * 60 * 1000; // 1min\n\nvar inactivityTimeout = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionInactivityTimeout || 30 * 60 * 1000; // 30mins\n\nvar forceLogout = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionForceLogout; //\n// provide a user activity heartbeat method which stamps the user record with a timestamp of the last\n// received activity heartbeat.\n//\n\nMeteor.methods({\n  heartbeat: function (userID) {\n    if (!userID) {\n      return;\n    }\n\n    var user = Inscription.findOne(userID);\n\n    if (user) {\n      Inscription.update(userID, {\n        $set: {\n          heartbeat: new Date()\n        }\n      });\n    }\n  }\n}); //\n// periodically purge any stale sessions, removing their login tokens and clearing out the stale heartbeat.\n//\n\nif (forceLogout !== false) {\n  Meteor.setInterval(function () {\n    var now = new Date(),\n        overdueTimestamp = new Date(now - inactivityTimeout);\n    Inscription.update({\n      heartbeat: {\n        $lt: overdueTimestamp\n      }\n    }, {\n      $set: {\n        etat: false\n      },\n      $unset: {\n        heartbeat: 1\n      }\n    }, {\n      multi: true\n    });\n  }, staleSessionPurgeInterval);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/server.js                                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.startup(() => {// code to run on server at startup\n});\nMeteor.methods({\n  insertInscription: function (data) {\n    console.log(data); //retourne l'ID\n\n    return Inscription.insert(data);\n  }\n});\nMeteor.methods({\n  connexion: function (data) {\n    return Connexion.insert(data);\n  }\n});\nMeteor.methods({\n  message: function (data3) {\n    return Message.insert(data3);\n  }\n});\nMeteor.methods({\n  newContact: function (data5) {\n    return Contact.insert(data5);\n  }\n});\nMeteor.methods({\n  recherche: function (data) {\n    return Recherche.insert(data);\n  }\n});\nMeteor.methods({\n  modifierSurnom: function (userIdNow, contact, newSurnom) {\n    return Contact.update({\n      userIdNow: userIdNow,\n      contact: contact\n    }, {\n      $set: {\n        surnom: newSurnom\n      }\n    });\n  }\n});\nMeteor.methods({\n  notification: function (sessionID, contactID) {\n    return Message.update({\n      idClient1: contactID,\n      idClient2: sessionID,\n      lu: \"false\"\n    }, {\n      $set: {\n        lu: \"true\"\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  lastMessage: function (time, sessionID, contactID) {\n    return Contact.update({\n      contact: sessionID,\n      userIdNow: contactID\n    }, {\n      $set: {\n        lastMessage: time\n      }\n    });\n  }\n});\nMeteor.methods({\n  deco: function (sessionID) {\n    return Inscription.update({\n      _id: sessionID\n    }, {\n      $set: {\n        etat: \"false\"\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  heureDeco: function (sessionID, heureDeco) {\n    return Connexion.update({\n      userIdNow: sessionID\n    }, {\n      $set: {\n        deconnexion: heureDeco\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  etat: function (userIdNow) {\n    return Inscription.update({\n      _id: userIdNow\n    }, {\n      $set: {\n        etat: \"true\"\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  dec0: function (userIdNow) {\n    return Connexion.update({\n      userIdNow: userIdNow\n    }, {\n      $set: {\n        deconnexion: 0\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  statut: function (statut, sessionID) {\n    return Inscription.update({\n      _id: sessionID\n    }, {\n      $set: {\n        statut: statut\n      }\n    });\n  }\n});\nMeteor.methods({\n  supprimerContact: function (sessionID, contactID) {\n    return Contact.remove({\n      userIdNow: sessionID,\n      contact: contactID\n    });\n  }\n});\nMeteor.methods({\n  supprimerMessage1: function (sessionID, contactID) {\n    return Message.update({\n      idClient1: sessionID,\n      idClient2: contactID\n    }, {\n      $set: {\n        luClient1: \"true\"\n      }\n    }, {\n      multi: true\n    });\n  }\n});\nMeteor.methods({\n  supprimerMessage2: function (sessionID, contactID) {\n    return Message.update({\n      idClient1: contactID,\n      idClient2: sessionID\n    }, {\n      $set: {\n        luClient2: \"true\"\n      }\n    }, {\n      multi: true\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"Router\":{\"router.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// Router/router.js                                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nRouter.configure({\n  loadingTemplate: 'loading',\n  notFoundTemplate: 'notFound'\n});\nRouter.route('/inscription', {\n  name: 'inscription'\n});\nRouter.route('/connexion', {\n  name: 'connexion'\n});\nRouter.route('/accueil', {\n  name: 'accueil'\n});\nRouter.route('/message', {\n  name: 'message'\n});\nRouter.route('/contact', {\n  name: 'contact'\n});\nRouter.route('/newContact', {\n  name: 'newContact'\n});\nRouter.route('/discussion', {\n  name: 'discussion'\n});\nRouter.route('/deconnexion', {\n  name: 'deconnexion'\n});\nRouter.route('/profil', {\n  name: 'profil'\n});\nRouter.route('/modifier', {\n  name: 'modifier'\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collection\":{\"collection.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// collection/collection.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nInscription = new Mongo.Collection(\"inscription\");\nConnexion = new Mongo.Collection(\"connexion\");\nMessage = new Mongo.Collection(\"message\");\nContact = new Mongo.Collection(\"contact\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/lib/stale_session.js\");\nrequire(\"/Router/router.js\");\nrequire(\"/collection/collection.js\");\nrequire(\"/server/server.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["server/lib/stale_session.js","server/server.js","Router/router.js","collection/collection.js"],"names":["staleSessionPurgeInterval","Meteor","settings","public","inactivityTimeout","staleSessionInactivityTimeout","forceLogout","staleSessionForceLogout","methods","heartbeat","userID","user","Inscription","findOne","update","$set","Date","setInterval","now","overdueTimestamp","$lt","etat","$unset","multi","module","watch","require","v","startup","insertInscription","data","console","log","insert","connexion","Connexion","message","data3","Message","newContact","data5","Contact","recherche","Recherche","modifierSurnom","userIdNow","contact","newSurnom","surnom","notification","sessionID","contactID","idClient1","idClient2","lu","lastMessage","time","deco","_id","heureDeco","deconnexion","dec0","statut","supprimerContact","remove","supprimerMessage1","luClient1","supprimerMessage2","luClient2","Router","configure","loadingTemplate","notFoundTemplate","route","name","Mongo","Collection"],"mappings":"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","file":"/app.js","sourcesContent":["//\n// Server side activity detection for the session timeout\n//\n// Meteor settings:\n// - staleSessionInactivityTimeout: the amount of time (in ms) after which, if no activity is noticed, a session will be considered stale\n// - staleSessionPurgeInterval: interval (in ms) at which stale sessions are purged i.e. found and forcibly logged out\n// - staleSessionForceLogout: whether or not we want to force log out and purge stale sessions\n//\nvar staleSessionPurgeInterval = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionPurgeInterval || (1*60*1000); // 1min\nvar inactivityTimeout = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionInactivityTimeout || (30*60*1000); // 30mins\nvar forceLogout = Meteor.settings && Meteor.settings.public && Meteor.settings.public.staleSessionForceLogout;\n\n//\n// provide a user activity heartbeat method which stamps the user record with a timestamp of the last\n// received activity heartbeat.\n//\nMeteor.methods({\n    heartbeat: function(userID) {\n        if (!userID) { return; }\n        var user = Inscription.findOne(userID);\n        if (user) {\n          Inscription.update(userID, {$set: {heartbeat: new Date()}});\n        }\n    }\n});\n\n\n//\n// periodically purge any stale sessions, removing their login tokens and clearing out the stale heartbeat.\n//\nif (forceLogout !== false) {\n    Meteor.setInterval(function() {\n        var now = new Date(), overdueTimestamp = new Date(now-inactivityTimeout);\n        Inscription.update({heartbeat: {$lt: overdueTimestamp}},\n                            {$set: {etat: false},\n                             $unset: {heartbeat:1}},\n                            {multi: true});\n    }, staleSessionPurgeInterval);\n}\n","import {\n  Meteor\n} from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\nMeteor.methods({\n  insertInscription: function(data) {\n    console.log(data);\n    //retourne l'ID\n    return Inscription.insert(data);\n  },\n});\n\n\nMeteor.methods({\n  connexion: function(data) {\n    return Connexion.insert(data);\n  },\n});\n\n\nMeteor.methods({\n  message: function(data3) {\n    return Message.insert(data3);\n  },\n});\n\nMeteor.methods({\n  newContact: function(data5) {\n    return Contact.insert(data5);\n  },\n});\n\nMeteor.methods({\n  recherche: function(data) {\n    return Recherche.insert(data);\n  },\n});\n\nMeteor.methods({\n  modifierSurnom: function(userIdNow, contact, newSurnom) {\n    return Contact.update({\n      userIdNow: userIdNow,\n      contact: contact\n    }, {\n      $set: {\n        surnom: newSurnom\n      }\n    });\n  },\n});\n\nMeteor.methods({\n  notification: function(sessionID, contactID) {\n    return Message.update({\n      idClient1: contactID,\n      idClient2: sessionID,\n      lu: \"false\",\n    }, {\n      $set: {\n        lu: \"true\"\n      }\n    }, {\n      multi: true\n    });\n  },\n});\n\nMeteor.methods({\n  lastMessage: function(time, sessionID, contactID) {\n    return Contact.update({\n      contact: sessionID,\n      userIdNow: contactID,\n    }, {\n      $set: {\n        lastMessage: time,\n      }\n    });\n  },\n});\n\nMeteor.methods({\n  deco: function(sessionID) {\n    return Inscription.update({\n      _id: sessionID,\n    }, {\n      $set: {\n        etat: \"false\",\n      }\n    }, {\n      multi: true\n    });\n  },\n});\n\nMeteor.methods({\n  heureDeco: function(sessionID, heureDeco) {\n    return Connexion.update({\n      userIdNow: sessionID,\n    }, {\n      $set: {\n        deconnexion: heureDeco,\n      }\n    }, {\n      multi: true\n    });\n  },\n});\n\nMeteor.methods({\n  etat: function(userIdNow) {\n    return Inscription.update({\n      _id: userIdNow,\n    }, {\n      $set: {\n        etat: \"true\",\n      }\n    }, {\n      multi: true\n    });\n  },\n});\n\n\nMeteor.methods({\n  dec0: function(userIdNow) {\n    return Connexion.update({\n      userIdNow: userIdNow,\n    }, {\n      $set: {\n        deconnexion: 0,\n      }\n    }, {\n      multi: true,\n    });\n  },\n});\n\nMeteor.methods({\n  statut: function(statut, sessionID) {\n    return Inscription.update({\n      _id: sessionID,\n    }, {\n      $set: {\n        statut: statut,\n      }\n    });\n  },\n});\n\nMeteor.methods({\n  supprimerContact: function(sessionID, contactID) {\n    return Contact.remove({\n      userIdNow: sessionID,\n      contact: contactID,\n    });\n  },\n});\n\nMeteor.methods({\n  supprimerMessage1: function(sessionID, contactID) {\n    return Message.update({\n        idClient1: sessionID,\n        idClient2: contactID,\n}, {\n  $set : {\n    luClient1 : \"true\",\n  }\n},{\n        multi : true,\n      });\n  },\n});\n\nMeteor.methods({\n  supprimerMessage2: function(sessionID, contactID) {\n    return Message.update({\n        idClient1: contactID,\n        idClient2: sessionID,\n}, {\n  $set : {\n    luClient2 : \"true\",\n  }\n},{\n        multi : true,\n      });\n  },\n});\n","Router.configure({\n  loadingTemplate: 'loading',\n  notFoundTemplate: 'notFound',\n});\n\n\nRouter.route('/inscription', {\n  name: 'inscription'\n});\n\n\nRouter.route('/connexion', {\n  name: 'connexion'\n});\n\nRouter.route('/accueil', {\n  name: 'accueil'\n});\n\nRouter.route('/message', {\n  name: 'message'\n});\n\nRouter.route('/contact', {\n  name: 'contact'\n});\n\nRouter.route('/newContact', {\n  name: 'newContact'\n});\n\nRouter.route('/discussion', {\n  name: 'discussion'\n});\n\nRouter.route('/deconnexion', {\n  name: 'deconnexion'\n});\n\nRouter.route('/profil', {\n  name: 'profil'\n});\n\nRouter.route('/modifier', {\n  name: 'modifier'\n});\n","Inscription =   new Mongo.Collection(\"inscription\");\nConnexion   =   new Mongo.Collection(\"connexion\");\nMessage     =   new Mongo.Collection(\"message\");\nContact     =   new Mongo.Collection(\"contact\");\n"]}}]